// JavaScript File

var hardwareButton = document.getElementById("hardwareButton");
var todoButton = document.getElementById("todoButton");
var displayText = document.getElementById("displayText");
var displayInfo = document.getElementById("displayInfo");
var example = document.getElementById("example");

hardwareButton.addEventListener("click", function(){
    
    displayText.innerHTML = " <h3> When you first look at my hardware page, you can see a picture of a piece of hardware with the name of that piece about it. But when you hover your mouse over the image, it flips over to reveal text that has information about that piece of hardware. I did this by using CSS to style my page in order to achieve the flip animation. </h3>";
    displayInfo.innerHTML = "<pre>" + "<code>" +".flip-container {" + "<br>" + "perspective: 1000px;}" + "<br>" + "<br>" + ".flip-container:hover .flipper, .flip-container.hover .flipper {" + "<br>" + "transform: rotateY(180deg);}" + "<br>" + "<br>" + ".flip-container, .front, .back {" +"<br>" +  "width: 485px;" + "<br>" + "height: 450px;}" + "<br>" + "<br>" + ".flipper {" + "<br>" + "transition: 1s;" + "<br>" + "transform-style: preserve-3d;" + "<br>" + "position: relative;" + "<br>" + "left:0;}" + "<br>" + "<br>" + ".front, .back {" + "<br>" + "backface-visibility: hidden;" + "<br>" + "position:absolute;" + "<br>" + "top:0;" + "<br>" + "left:0;}" + "<br>" + "<br>" + ".front {" + "<br>" + "z-index: 2;" + "<br>" + "transform: rotateY(0deg);}" + "<br>" + "<br>" + ".back {" + "<br>" + "transform: rotateY(180deg);}" + "<br>" + "<br>" + ".front, .back{" + "<br>" + "border: solid black 3px;" +"<br>" + "padding-top:10px;}" + " </code>" + "</pre>" + "<br>" + "<p>-First off, the 'perspective' determines how wide the flipper is. If I had a smaller perspective, the flipper would appear smaller when it flips.<br><br>-Next, flip-container: hover' tells the computer to watch for the mouse to hover over the image. 'transform: rotateY(180deg)' Tells the computer to flip the image tp reveal the text by rotating 180degrees in the Y direction.<br><br>-'flip container' is the box that is being rotates that holds the image(s) and the text. I the 'width' and 'height' sets the size of the box, 485px wide and 480px high.<br><br>-Next, the flip speed determines how fast the image is flipped. If I have a longer flip speed, the image would flip slower and a shorter flip speed would flip the image faster. I have is set so the image flips in one second.<br><br>-The 'backface-visibility:hidden' tells the computer to hide the text so that it isn't seen behind the image until it is flipped. If it wasn't there, you would see a mirrored version of the text behing the image. When it is flipped, the image would be seen behind the text. <br><br>-The next set of code under z-index' is the part of the same code from earlier but for Firefox 31 as some code may not work for all systems. <br><br>-The next set of code is for the text side of the image. This part of the code tells the text to flip back to the image if the mouse doesn't hover on the image.<br><br>-The last set of code is to make the box that is around the text and the images. It is solid black and 3px thick. The padding on the top gives space between the top of the text or image and the border.</p>";
    example.innerHTML = '<div class="flip-container" ontouchstart="this.classList.toggle("hover");"> <div class="flipper"> <div class="front"> Hover your mouse over me!! </div> <div class="back"> <img id="clown" src="pictures/cookie.jpg"  width= "500px"> </div> </div>'
;});



todoButton.addEventListener("click", function(){
    displayText.innerHTML = "<h3>" + "When you first look at my todo list where you can add items into a list, color code your items, and delete them when you are done. I do this mainly using HTML, Javascript, and some CSS to center the text. For the HTML, I only have my text that explains what to do on the todo list, an input box where a user puts text that will be put into the list, a dropdown where a user can choose what color they want the text to be when it is added, and a submit button that will add the text when pressed and an area to place the list items which are put in a div tag for organization. On this page, I will be explaining the Javascript that is used to make my todo list work. " + "</h3>";
    displayInfo.innerHTML = '<pre><code>' + 'var input = document.getElementById("input");' +'<br>' + 'var dropdown = document.getElementById("dropdown");' + '<br>' + 'var submitButton = document.getElementById("submitButton");' + '<br>' + 'var display = document.getElementById("display");' + '<br><br>' + "submitButton.addEventListener('click', function(){" + '<br>' + "var colorBlack = '&lt;div; style= color: black'> + input.value + '&lt;div&gt;';" + '<br>' + 'if (dropdown.value === "black"){' + '<br>' + 'display.innerHTML = display.innerHTML + colorBlack;}' + '<br>' + 'var colorRed = "&lt;div; style="color: red> + input.value + "&lt;div&gt;";' + '<br>' + 'if (dropdown.value === "red"){' + '<br>'+ 'display.innerHTML = display.innerHTML + colorRed;}' + '<br>' + 'var colorYellow = "&lt;div style="color: yellow">" + input.value + "&lt;div&gt;";' + '<br>' + 'if (dropdown.value === "yellow"){' + '<br>' + 'display.innerHTML = display.innerHTML + colorYellow;}' + '<br>' + 'var colorGreen = "&lt;div style="color: green">" + input.value + "&lt;div&gt;";' + '<br>' + 'if (dropdown.value === "green"){' + '<br>' + 'display.innerHTML = display.innerHTML + colorGreen;}' + '<br>' + 'var colorBlue = "&lt;div style="color: blue">" + input.value + "&lt;div&gt;";' + '<br>' + 'if (dropdown.value === "blue"){' + '<br>' + 'display.innerHTML = display.innerHTML + colorBlue;}' + '<br>' + 'var colorPurple = "&lt;div style="color: purple">" + input.value + "&lt;div&gt;";' +  '<br>' + 'if (dropdown.value === "purple"){' + '<br>' + 'display.innerHTML = display.innerHTML + colorPurple;}' + '<br>' + 'var colorOrange = "&lt;div style="color: orange">" + input.value + "&lt;div&gt;";' + '<br>' + 'if (dropdown.value === "orange"){' + '<br>' + 'display.innerHTML = display.innerHTML + colorOrange;}' + '<br>' + 'var colorGrey = "&lt;div style="color: grey">" + input.value + "&lt;div&gt;";' + '<br>' + 'if (dropdown.value === "grey"){' + '<br>' + 'display.innerHTML = display.innerHTML + colorGrey;}' + '<br>' + '});' + '<br>' + '<br>' +'display.addEventListener("click", function(evt){' + '<br>' + 'var text=evt.target;'+ "<br>" + 'if (text.style.textDecoration === "line-through"){' + "<br>" + 'text.parentNode.removeChild(text)};' + "<br>" + "<br>" + 'else {text.style.textDecoration = "line-through"}})' + "</code></pre>" + "<br>" + "<br>" + "<p> -First off, Each of these 4 variables here are linked to the HTML page of the todo list. <br> -The input variable being the box that will hold the text that will be added to the list.<br> -The dropdown variable being the dropdown list where you can choose the color of the text you wan. <br> -The submit button is the button you click to add thetext to the list. <br> -The display variable being the area below where the todo list would be displayed." + "<br><br><br>" + "-Next, I created an Event Listener for the dropdown that holds the colors that the new list item will turn into. <br> -For each color, I first created a variable that has a preset div tag that holds a style atttribute with the color that is being selected. <br> -When the color is selected and the submit button is pushed, the text that is in the input box will be added to the list in the color selected by the user. <br> -This is done by just adding on the new text to what is already there. <br><br><br> -Lastly, the last Event Listener is how crossing-out then deleting todo list items. <br> -I first created an Event Listener that listens for a click in the area that displays the list items. <br> -The target of the event is the line of text that the user either wants to cross-out or delete. <br> -If the text, doesn't have have a line throught the text, then it will put a line through it. <br> -If there is a line, then the text will be deleted from the page. <br><br><br><br>";
    example.innerHTML = ''
;});